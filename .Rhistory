install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 5,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "69008", #filtrer le tout
q_fields = "Code_postal_(BAN)", #sert a entrer les champs de filtre
qs = "Date_réception_DPE:[2023-06-29 TO 2023-08-30]" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une première requête GET en récupérant les données de la première page. Observer la réponse de la requête.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une première requête GET en récupérant les données de la première page. Observer la réponse de la requête.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
print(content$total)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 5,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
print(content$total)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E+F+G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
#1 - Effectuer une requête GET en récupérant les données de la page 1 avec 20 résultats et en sélectionnant les colonnes N°DPE, Etiquette_DPE et Date_réception_DPE et en filtrant par Etiquette_DPE égale à E, F ou G.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E+F+G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une requête GET en récupérant les données de la page 1 avec 20 résultats et en sélectionnant les colonnes N°DPE, Etiquette_DPE et Date_réception_DPE et en filtrant par Etiquette_DPE égale à E, F ou G.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E,F,G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#verification du besoin d'installer des packages
if(!require(shiny)) install.packages("shiny")
if(!require(bslib)) install.packages("bslib")
if(!require(shinymanager)) install.packages("shinymanager")
#chargement des packages :
#sert au fonctionnement de l'application
library(shiny)
#theme de l'application
library(bslib)
#gestion des mots de passe
library(shinymanager)
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
shiny::runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis")
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis")
df = read.csv2("Logement_Lozère.csv")
Logement = read.csv2("Logement_Lozère.csv")
View(Logement)
View(Logement)
mean(Logement$Coût_total_5_usages)
mean(Logement$Coût_total_5_usages, na.rm = T)
summary(Logement)
Logement = read.csv2("Logement_Lozère.csv", sep = ";", dec = ".")
summary(Logement)
mean(Logement$Coût_total_5_usages)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis") #redirection vers le dossier qui contient le fichier logement lozère
Logement = read.csv2("Logement_Lozère.csv", sep = ";", dec = ".")
summary(Logement)
