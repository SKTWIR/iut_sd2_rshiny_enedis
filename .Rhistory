install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 5,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "69008", #filtrer le tout
q_fields = "Code_postal_(BAN)", #sert a entrer les champs de filtre
qs = "Date_réception_DPE:[2023-06-29 TO 2023-08-30]" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une première requête GET en récupérant les données de la première page. Observer la réponse de la requête.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une première requête GET en récupérant les données de la première page. Observer la réponse de la requête.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = "",
select = "", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
print(content$total)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 5,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "", #filtrer le tout
q_fields = "", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
print(content$total)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E+F+G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
#1 - Effectuer une requête GET en récupérant les données de la page 1 avec 20 résultats et en sélectionnant les colonnes N°DPE, Etiquette_DPE et Date_réception_DPE et en filtrant par Etiquette_DPE égale à E, F ou G.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Code_postal_(BAN),Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E+F+G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#1 - Effectuer une requête GET en récupérant les données de la page 1 avec 20 résultats et en sélectionnant les colonnes N°DPE, Etiquette_DPE et Date_réception_DPE et en filtrant par Etiquette_DPE égale à E, F ou G.
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
# Paramètres de la requête
params <- list(
page = 1,
size = 20,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE", #séléctions des champs
q = "E,F,G", #filtrer le tout
q_fields = "Etiquette_DPE", #sert a entrer les champs de filtre
qs = "" #filtrage + précis avec colonnes + argument
)
# Encodage des paramètres
url_encoded <- modify_url(base_url, query = params)
print(url_encoded)
# Effectuer la requête
response <- GET(url_encoded)
# Afficher le statut de la réponse
print(status_code(response))
# On convertit le contenu brut (octets) en une chaîne de caractères (texte). Cela permet de transformer les données reçues de l'API, qui sont généralement au format JSON, en une chaîne lisible par R
content = fromJSON(rawToChar(response$content), flatten = FALSE)
# Afficher le nombre total de ligne dans la base de données
print(content$total)
# Afficher les données récupérées
df <- content$result
dim(df)
View(df)
#verification du besoin d'installer des packages
if(!require(shiny)) install.packages("shiny")
if(!require(bslib)) install.packages("bslib")
if(!require(shinymanager)) install.packages("shinymanager")
#chargement des packages :
#sert au fonctionnement de l'application
library(shiny)
#theme de l'application
library(bslib)
#gestion des mots de passe
library(shinymanager)
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
shiny::runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
runApp('C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis')
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis")
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis")
df = read.csv2("Logement_Lozère.csv")
Logement = read.csv2("Logement_Lozère.csv")
View(Logement)
View(Logement)
mean(Logement$Coût_total_5_usages)
mean(Logement$Coût_total_5_usages, na.rm = T)
summary(Logement)
Logement = read.csv2("Logement_Lozère.csv", sep = ";", dec = ".")
summary(Logement)
mean(Logement$Coût_total_5_usages)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis") #redirection vers le dossier qui contient le fichier logement lozère
Logement = read.csv2("Logement_Lozère.csv", sep = ";", dec = ".")
summary(Logement)
View(Logement)
View(Logement)
setwd("C:/Users/irahm/OneDrive/Bureau/app r/iut_sd2_rshiny_enedis") #redirection vers le dossier qui contient le fichier logement lozère
Logement = read.csv2("Logement_Lozère.csv", sep = ";", dec = ".")
#aide personnelle a la réalisation du rmarkdown
#echo : Affiche ou non le code.
#eval : Exécute ou non le code.
#warning : Affiche ou non les warnings.
#message : Affiche ou non les messages.
install.packages("ggplot2")
library(ggplot2)
#aide personnelle a la réalisation du rmarkdown
#echo : Affiche ou non le code.
#eval : Exécute ou non le code.
#warning : Affiche ou non les warnings.
#message : Affiche ou non les messages.
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
compte_types <- table(Logement$Type_bâtiment)
print(compte_types)
compte_types <- table(Logement$Type_bâtiment)
print(compte_types)
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Créer un graphique à barres
ggplot(data = compte_df, aes(x = type_batiment, y = nombre, fill = type_batiment)) +
geom_bar(stat = "identity") +
labs(title = "Nombre de maisons et d'appartements",
x = "Type de Bâtiment",
y = "Nombre") +
theme_minimal()
ggplot(data = compte_df, aes(x = type_batiment, y = nombre, fill = type_batiment)) +
geom_bar(stat = "identity") +
geom_text(aes(label = nombre), vjust = -0.5, size = 4) +  # Affiche les nombres sur les barres
labs(title = "Nombre de maisons et d'appartements",
x = "Type de Bâtiment",
y = "Nombre") +
theme_minimal()
compte_types <- table(Logement$Type_bâtiment)
print(compte_types)
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
ggplot(data = compte_df, aes(x = type_batiment, y = nombre, fill = type_batiment)) +
geom_bar(stat = "identity") +
geom_text(aes(label = nombre), vjust = -0.5, size = 4) +  # Affiche les nombres sur les barres
labs(title = "Nombre de maisons et d'appartements",
x = "Type de Bâtiment",
y = "Nombre") +
theme_minimal()
compte_types <- table(Logement$Type_bâtiment)
print(compte_types)
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
ggplot(data = compte_df, aes(x = type_batiment, y = nombre, fill = type_batiment)) +
geom_bar(stat = "identity") +
geom_text(aes(label = nombre), vjust = -0.5, size = 4) +  # Affiche les nombres sur les barres
labs(title = "Nombre de maisons et d'appartements",
x = "Type de Bâtiment",
y = "Nombre") +
theme_minimal()
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 0, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 2, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 5, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 1)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
# Transformer le tableau en dataframe
compte_df <- as.data.frame(compte_types)
colnames(compte_df) <- c("type_batiment", "nombre")  # Renommer les colonnes
# Calculer les pourcentages
compte_df$fraction <- compte_df$nombre / sum(compte_df$nombre)
compte_df$percentage <- round(compte_df$fraction * 100, 1)
# Créer un pie chart avec pourcentages
ggplot(compte_df, aes(x = "", y = nombre, fill = type_batiment)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5)) +
labs(title = "Répartition des types de bâtiments",
x = NULL,
y = NULL) +
theme_void() +
theme(legend.title = element_blank())
compte_types_2 <- table(Logement$Etiquette_DPE)
print(compte_types_2)
compte_df_2 <- as.data.frame(compte_types_2)
colnames(compte_df_2) <- c("Etiquette_DPE", "nombre")
ggplot(compte_df_2, aes(x = Etiquette_DPE, y = nombre, fill = Etiquette_DPE)) +
geom_bar(stat = "identity", width = 0.7) +  # Créer les bâtons
labs(title = "Répartition des étiquettes DPE",
x = "Étiquette DPE",
y = "Nombre d'occurrences") +
theme_minimal() +  # Appliquer un thème minimaliste
theme(legend.position = "none")  # Supprimer la légende
compte_df_2 <- as.data.frame(compte_types_2)
colnames(compte_df_2) <- c("Etiquette_DPE", "nombre")
ggplot(compte_df, aes(x = Etiquette_DPE, y = nombre, fill = Etiquette_DPE)) +
geom_bar(stat = "identity", width = 0.7) +  # Créer les bâtons
geom_text(aes(label = nombre), vjust = -0.5, size = 4) +  # Ajouter les nombres au-dessus des barres
labs(title = "Répartition des étiquettes DPE",
x = "Étiquette DPE",
y = "Nombre d'occurrences") +
theme_minimal() +  # Appliquer un thème minimaliste
theme(legend.position = "none")  # Supprimer la légende
compte_df_2 <- as.data.frame(compte_types_2)
colnames(compte_df_2) <- c("Etiquette_DPE", "nombre")
ggplot(compte_df_2, aes(x = Etiquette_DPE, y = nombre, fill = Etiquette_DPE)) +
geom_bar(stat = "identity", width = 0.7) +  # Créer les bâtons
geom_text(aes(label = nombre), vjust = -0.5, size = 4) +  # Ajouter les nombres au-dessus des barres
labs(title = "Répartition des étiquettes DPE",
x = "Étiquette DPE",
y = "Nombre d'occurrences") +
theme_minimal() +  # Appliquer un thème minimaliste
theme(legend.position = "none")  # Supprimer la légende
mean(Logement$Coût_total_5_usages)
a = aggregate(Coût_total_5_usages ~ Etiquette_DPE, Logement, FUN = mean)
print(a)
ggplot(data = a, aes(x = Etiquette_DPE, y = Coût_total_5_usages)) +
geom_bar(stat = "identity", fill = "lightblue") +  # Créer les barres avec les moyennes
labs(title = "Moyenne du Coût Total par Etiquette DPE",
x = "Etiquette DPE",
y = "Moyenne du Coût Total (5 usages)") +  # Ajouter les titres et labels des axes
theme_minimal()
print("nous pouvons remarquer que plus l'étiquette de DPE est basse plus le cout total est elevé en moyennes")
