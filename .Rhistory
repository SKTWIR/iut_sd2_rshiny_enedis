#install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
#install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
ColAGarder = c('N°DPE,Etiquette_DPE')
adresses_48 = read.csv("adresses_48.csv",header=T,sep= ";",dec=".")
#install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
ColAGarder = c('N°DPE,Etiquette_DPE')
adresses_48 = read.csv("adresses-48.csv",header=T,sep= ";",dec=".")
code = unique(adresses_48$code_postal)
code
annee = seq(2021,2024,1)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
df = data.frame()
for (i in code[1:1]) {
params <- list(
size = 1,
q = i,
q_fields = "Code_postal_(BAN)"
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
print(content$total)
if (content$total < 10000) {
params <- list(
size = 50,
q = i,
q_fields = "Code_postal_(BAN)",
select = ColAGarder
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
df = rbind(df,content$result)}
else { for (a in annee) {
a=as.character(a)
params <- list(
size = 10000,
q = i,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[",a,"-01-01 TO ",a,"-12-31]"),
select = ColAGarder
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
df = rbind(df,content$result)}
}
}
View(df)
View(df)
credentials <- data.frame(
user = c("shiny", "administrateur"), # mandatory
password = c("azerty", "administrateur"), # mandatory
start = c("2019-04-15"), # optinal (all others)
expire = c(NA, "2019-12-31"),
admin = c(FALSE, TRUE),
comment = "Simple and secure authentification mechanism
for single ‘Shiny’ applications.",
stringsAsFactors = FALSE)
#sert au fonctionnement de l'application
library(shiny)
#theme de l'application
library(bslib)
#gestion des mots de passe
library(shinymanager)
runApp()
runApp()
runApp()
runApp()
# define some basic credentials (on data.frame) j'ai pas réussi a faire fonctionner le truc mdrrr
credentials <- data.frame(
user = c("shiny", "administrateur"), # mandatory
password = c("azerty", "administrateur"), # mandatory
start = c("2019-04-15"), # optinal (all others)
expire = c(NA, "2019-12-31"),
admin = c(FALSE, TRUE),
comment = "Simple and secure authentification mechanism
for single ‘Shiny’ applications.",
stringsAsFactors = FALSE)
#verification du besoin d'installer des packages
if(!require(shiny)) install.packages("shiny")
if(!require(bslib)) install.packages("bslib")
if(!require(shinymanager)) install.packages("shinymanager")
if(!require(sf)) install.packages("sf")
#chargement des packages :
#sert au fonctionnement de l'application
library(shiny)
#theme de l'application
library(bslib)
#gestion des mots de passe
library(shinymanager)
#pr créer un map
library(sf)
#install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
ColAGarder = c('N°DPE,Etiquette_DPE')
adresses_48 = read.csv("adresses-48.csv",header=T,sep= ";",dec=".")
code = unique(adresses_48$code_postal)
code
annee = seq(2021,2024,1)
base_url <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
df = data.frame()
for (i in code[1:1]) {
params <- list(
size = 1,
q = i,
q_fields = "Code_postal_(BAN)"
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
print(content$total)
if (content$total < 10000) {
params <- list(
size = 50,
q = i,
q_fields = "Code_postal_(BAN)",
select = ColAGarder
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
df = rbind(df,content$result)}
else { for (a in annee) {
a=as.character(a)
params <- list(
size = 10000,
q = i,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[",a,"-01-01 TO ",a,"-12-31]"),
select = ColAGarder
)
url_encoded <- modify_url(base_url, query = params)
response <- GET(url_encoded)
content = fromJSON(rawToChar(response$content), flatten = FALSE)
df = rbind(df,content$result)}
}
}
View(adresses_48)
View(adresses_48)
View(content)
View(credentials)
View(df)
View(params)
View(response)
shiny::runApp()
